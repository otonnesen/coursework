
a4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  0000072c  000007c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080023a  0080023a  000007fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016d6  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f22  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c1  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000036b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000670  00000000  00000000  0000384c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e1  00000000  00000000  00003ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000469d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	35 c1       	rjmp	.+618    	; 0x2c8 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e2       	ldi	r30, 0x2C	; 44
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 33       	cpi	r26, 0x3E	; 62
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	60 d1       	rcall	.+704    	; 0x3e0 <main>
 120:	03 c3       	rjmp	.+1542   	; 0x728 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_nibble>:

void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
    lcd_putchar( ' ' );
}
 124:	e2 e0       	ldi	r30, 0x02	; 2
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	90 81       	ld	r25, Z
 12a:	9f 7e       	andi	r25, 0xEF	; 239
 12c:	90 83       	st	Z, r25
 12e:	88 23       	and	r24, r24
 130:	1c f4       	brge	.+6      	; 0x138 <lcd_nibble+0x14>
 132:	90 81       	ld	r25, Z
 134:	90 61       	ori	r25, 0x10	; 16
 136:	90 83       	st	Z, r25
 138:	e2 e0       	ldi	r30, 0x02	; 2
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	90 81       	ld	r25, Z
 13e:	97 7f       	andi	r25, 0xF7	; 247
 140:	90 83       	st	Z, r25
 142:	86 ff       	sbrs	r24, 6
 144:	03 c0       	rjmp	.+6      	; 0x14c <lcd_nibble+0x28>
 146:	90 81       	ld	r25, Z
 148:	98 60       	ori	r25, 0x08	; 8
 14a:	90 83       	st	Z, r25
 14c:	73 98       	cbi	0x0e, 3	; 14
 14e:	85 fd       	sbrc	r24, 5
 150:	73 9a       	sbi	0x0e, 3	; 14
 152:	a5 98       	cbi	0x14, 5	; 20
 154:	84 fd       	sbrc	r24, 4
 156:	a5 9a       	sbi	0x14, 5	; 20
 158:	e2 e0       	ldi	r30, 0x02	; 2
 15a:	f1 e0       	ldi	r31, 0x01	; 1
 15c:	80 81       	ld	r24, Z
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_nibble+0x40>
 168:	00 00       	nop
 16a:	80 81       	ld	r24, Z
 16c:	8f 7b       	andi	r24, 0xBF	; 191
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret

00000172 <lcd_command>:
 172:	cf 93       	push	r28
 174:	c8 2f       	mov	r28, r24
 176:	e2 e0       	ldi	r30, 0x02	; 2
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	80 81       	ld	r24, Z
 17c:	8f 7d       	andi	r24, 0xDF	; 223
 17e:	80 83       	st	Z, r24
 180:	8c 2f       	mov	r24, r28
 182:	d0 df       	rcall	.-96     	; 0x124 <lcd_nibble>
 184:	8c 2f       	mov	r24, r28
 186:	82 95       	swap	r24
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	cc df       	rcall	.-104    	; 0x124 <lcd_nibble>
 18c:	87 ec       	ldi	r24, 0xC7	; 199
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_command+0x1e>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_command+0x24>
 196:	00 00       	nop
 198:	c4 30       	cpi	r28, 0x04	; 4
 19a:	18 f0       	brcs	.+6      	; 0x1a2 <lcd_command+0x30>
 19c:	c0 38       	cpi	r28, 0x80	; 128
 19e:	50 f0       	brcs	.+20     	; 0x1b4 <lcd_command+0x42>
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <lcd_command+0x3e>
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	9f e1       	ldi	r25, 0x1F	; 31
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_command+0x34>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_command+0x3a>
 1ac:	00 00       	nop
 1ae:	c0 e8       	ldi	r28, 0x80	; 128
 1b0:	c0 93 06 02 	sts	0x0206, r28	; 0x800206 <lcd_pos>
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <lcd_putchar>:
 1b8:	cf 93       	push	r28
 1ba:	c8 2f       	mov	r28, r24
 1bc:	e2 e0       	ldi	r30, 0x02	; 2
 1be:	f1 e0       	ldi	r31, 0x01	; 1
 1c0:	80 81       	ld	r24, Z
 1c2:	80 62       	ori	r24, 0x20	; 32
 1c4:	80 83       	st	Z, r24
 1c6:	8c 2f       	mov	r24, r28
 1c8:	ad df       	rcall	.-166    	; 0x124 <lcd_nibble>
 1ca:	8c 2f       	mov	r24, r28
 1cc:	82 95       	swap	r24
 1ce:	80 7f       	andi	r24, 0xF0	; 240
 1d0:	a9 df       	rcall	.-174    	; 0x124 <lcd_nibble>
 1d2:	87 ec       	ldi	r24, 0xC7	; 199
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_putchar+0x1e>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_putchar+0x24>
 1dc:	00 00       	nop
 1de:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <lcd_pos>
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <lcd_pos>
 1e8:	80 39       	cpi	r24, 0x90	; 144
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <lcd_putchar+0x3c>
 1ec:	80 3d       	cpi	r24, 0xD0	; 208
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <lcd_putchar+0x40>
 1f0:	80 e8       	ldi	r24, 0x80	; 128
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <lcd_putchar+0x3e>
 1f4:	80 ec       	ldi	r24, 0xC0	; 192
 1f6:	bd df       	rcall	.-134    	; 0x172 <lcd_command>
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <lcd_puts>:
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
 202:	88 81       	ld	r24, Y
 204:	88 23       	and	r24, r24
 206:	29 f0       	breq	.+10     	; 0x212 <lcd_puts+0x16>
 208:	21 96       	adiw	r28, 0x01	; 1
 20a:	d6 df       	rcall	.-84     	; 0x1b8 <lcd_putchar>
 20c:	89 91       	ld	r24, Y+
 20e:	81 11       	cpse	r24, r1
 210:	fc cf       	rjmp	.-8      	; 0x20a <lcd_puts+0xe>
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <lcd_init>:


void lcd_init( void )
{
  LCD_DDR_D4 = 1;                               // enable output pins
 218:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
 21a:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
 21c:	e1 e0       	ldi	r30, 0x01	; 1
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	80 81       	ld	r24, Z
 222:	88 60       	ori	r24, 0x08	; 8
 224:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
 226:	80 81       	ld	r24, Z
 228:	80 61       	ori	r24, 0x10	; 16
 22a:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
 22c:	80 81       	ld	r24, Z
 22e:	80 62       	ori	r24, 0x20	; 32
 230:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
 232:	80 81       	ld	r24, Z
 234:	80 64       	ori	r24, 0x40	; 64
 236:	80 83       	st	Z, r24
  LCD_E0 = 0;
 238:	e2 e0       	ldi	r30, 0x02	; 2
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	80 81       	ld	r24, Z
 23e:	8f 7b       	andi	r24, 0xBF	; 191
 240:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
 242:	80 81       	ld	r24, Z
 244:	8f 7d       	andi	r24, 0xDF	; 223
 246:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	8f e5       	ldi	r24, 0x5F	; 95
 24a:	9a ee       	ldi	r25, 0xEA	; 234
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_init+0x34>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_init+0x3a>
 252:	00 00       	nop

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	66 df       	rcall	.-308    	; 0x124 <lcd_nibble>
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	90 e4       	ldi	r25, 0x40	; 64
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x44>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_init+0x4a>
 262:	00 00       	nop
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
 264:	80 e3       	ldi	r24, 0x30	; 48
 266:	5e df       	rcall	.-324    	; 0x124 <lcd_nibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	8f e8       	ldi	r24, 0x8F	; 143
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <lcd_init+0x54>
 270:	00 c0       	rjmp	.+0      	; 0x272 <lcd_init+0x5a>
  _delay_us( 100 );
  lcd_nibble( 0x30 );
 272:	00 00       	nop
 274:	80 e3       	ldi	r24, 0x30	; 48
 276:	56 df       	rcall	.-340    	; 0x124 <lcd_nibble>
 278:	87 ec       	ldi	r24, 0xC7	; 199
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init+0x64>
 280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_init+0x6a>
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
 282:	00 00       	nop
 284:	80 e2       	ldi	r24, 0x20	; 32
 286:	4e df       	rcall	.-356    	; 0x124 <lcd_nibble>
 288:	87 ec       	ldi	r24, 0xC7	; 199
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x74>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_init+0x7a>
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
 292:	00 00       	nop
 294:	88 e2       	ldi	r24, 0x28	; 40
#endif
  lcd_command( 0x08 );                          // display off
 296:	6d df       	rcall	.-294    	; 0x172 <lcd_command>
 298:	88 e0       	ldi	r24, 0x08	; 8
  lcd_command( 0x01 );                          // display clear
 29a:	6b df       	rcall	.-298    	; 0x172 <lcd_command>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	69 df       	rcall	.-302    	; 0x172 <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	67 df       	rcall	.-306    	; 0x172 <lcd_command>
 2a4:	8c e0       	ldi	r24, 0x0C	; 12
  lcd_command( 0x0C );                          // on, no cursor, no blink
 2a6:	65 cf       	rjmp	.-310    	; 0x172 <lcd_command>
 2a8:	08 95       	ret

000002aa <poll_adc>:

volatile int scroll = 1;

unsigned short poll_adc(){
	unsigned short adc_result = 0;
	ADCSRA |= 0x40;
 2aa:	ea e7       	ldi	r30, 0x7A	; 122
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	80 64       	ori	r24, 0x40	; 64
 2b2:	80 83       	st	Z, r24
	while((ADCSRA & 0x40) == 0x40);
 2b4:	80 81       	ld	r24, Z
 2b6:	86 fd       	sbrc	r24, 6
 2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <poll_adc+0xa>
	unsigned short result_low = ADCL;
 2ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	unsigned short result_high = ADCH;
 2be:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	adc_result = (result_high<<8)|result_low;
	return adc_result;
 2c2:	90 e0       	ldi	r25, 0x00	; 0
}
 2c4:	92 2b       	or	r25, r18
 2c6:	08 95       	ret

000002c8 <__vector_23>:

ISR(TIMER0_OVF_vect) {
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	0b b6       	in	r0, 0x3b	; 59
 2d4:	0f 92       	push	r0
 2d6:	2f 93       	push	r18
 2d8:	3f 93       	push	r19
 2da:	4f 93       	push	r20
 2dc:	5f 93       	push	r21
 2de:	6f 93       	push	r22
 2e0:	7f 93       	push	r23
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	unsigned short adc_result = poll_adc();
 2ee:	dd df       	rcall	.-70     	; 0x2aa <poll_adc>
	if (adc_result == 0x0C3) {
 2f0:	83 3c       	cpi	r24, 0xC3	; 195
 2f2:	91 05       	cpc	r25, r1
 2f4:	29 f4       	brne	.+10     	; 0x300 <__vector_23+0x38>
		scroll = 0;
 2f6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <scroll+0x1>
 2fa:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <scroll>
 2fe:	09 c0       	rjmp	.+18     	; 0x312 <__vector_23+0x4a>
	} if (adc_result == 0x17C) {
 300:	8c 37       	cpi	r24, 0x7C	; 124
 302:	91 40       	sbci	r25, 0x01	; 1
 304:	31 f4       	brne	.+12     	; 0x312 <__vector_23+0x4a>
		scroll = 1;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <scroll+0x1>
 30e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <scroll>
	}
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	7f 91       	pop	r23
 320:	6f 91       	pop	r22
 322:	5f 91       	pop	r21
 324:	4f 91       	pop	r20
 326:	3f 91       	pop	r19
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0b be       	out	0x3b, r0	; 59
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <str_len>:

int str_len(char* msg) {
	for (int i = 0;;i++) if (*(msg+i)=='\0') return i;
 338:	fc 01       	movw	r30, r24
 33a:	20 81       	ld	r18, Z
 33c:	21 11       	cpse	r18, r1
 33e:	03 c0       	rjmp	.+6      	; 0x346 <str_len+0xe>
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	08 95       	ret
 346:	fc 01       	movw	r30, r24
 348:	31 96       	adiw	r30, 0x01	; 1
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	21 91       	ld	r18, Z+
 352:	21 11       	cpse	r18, r1
 354:	fc cf       	rjmp	.-8      	; 0x34e <str_len+0x16>
}
 356:	08 95       	ret

00000358 <cpy_w_offset>:

char *cpy_w_offset(Message* msg, char* cpy) {
 358:	af 92       	push	r10
 35a:	bf 92       	push	r11
 35c:	cf 92       	push	r12
 35e:	df 92       	push	r13
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	7c 01       	movw	r14, r24
 36e:	8b 01       	movw	r16, r22
	int len = str_len(msg->text);
 370:	dc 01       	movw	r26, r24
 372:	8d 91       	ld	r24, X+
 374:	9c 91       	ld	r25, X
 376:	e0 df       	rcall	.-64     	; 0x338 <str_len>
 378:	5c 01       	movw	r10, r24
	for (int i = msg->offset, j = 0; j < 16; i++, j++) {
 37a:	f7 01       	movw	r30, r14
 37c:	22 81       	ldd	r18, Z+2	; 0x02
 37e:	33 81       	ldd	r19, Z+3	; 0x03
 380:	e8 01       	movw	r28, r16
 382:	69 01       	movw	r12, r18
 384:	f0 e1       	ldi	r31, 0x10	; 16
 386:	cf 0e       	add	r12, r31
 388:	d1 1c       	adc	r13, r1
		*(cpy+j) = *(msg->text+i%len);
 38a:	c9 01       	movw	r24, r18
 38c:	b5 01       	movw	r22, r10
 38e:	84 d0       	rcall	.+264    	; 0x498 <__divmodhi4>
 390:	d7 01       	movw	r26, r14
 392:	ed 91       	ld	r30, X+
 394:	fc 91       	ld	r31, X
 396:	e8 0f       	add	r30, r24
 398:	f9 1f       	adc	r31, r25
 39a:	80 81       	ld	r24, Z
 39c:	89 93       	st	Y+, r24
	for (int i = 0;;i++) if (*(msg+i)=='\0') return i;
}

char *cpy_w_offset(Message* msg, char* cpy) {
	int len = str_len(msg->text);
	for (int i = msg->offset, j = 0; j < 16; i++, j++) {
 39e:	2f 5f       	subi	r18, 0xFF	; 255
 3a0:	3f 4f       	sbci	r19, 0xFF	; 255
 3a2:	2c 15       	cp	r18, r12
 3a4:	3d 05       	cpc	r19, r13
 3a6:	89 f7       	brne	.-30     	; 0x38a <cpy_w_offset+0x32>
		*(cpy+j) = *(msg->text+i%len);
	}
	cpy[16] = '\0';
 3a8:	f8 01       	movw	r30, r16
 3aa:	10 8a       	std	Z+16, r1	; 0x10
    return cpy;
}
 3ac:	c8 01       	movw	r24, r16
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	ff 90       	pop	r15
 3b8:	ef 90       	pop	r14
 3ba:	df 90       	pop	r13
 3bc:	cf 90       	pop	r12
 3be:	bf 90       	pop	r11
 3c0:	af 90       	pop	r10
 3c2:	08 95       	ret

000003c4 <new_message>:

Message *new_message(char* message) {
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	ec 01       	movw	r28, r24
	Message* msg = (Message*) malloc(sizeof *msg);
 3ca:	84 e0       	ldi	r24, 0x04	; 4
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	8b d0       	rcall	.+278    	; 0x4e6 <malloc>
	msg->text = message;
 3d0:	fc 01       	movw	r30, r24
 3d2:	d1 83       	std	Z+1, r29	; 0x01
 3d4:	c0 83       	st	Z, r28
	msg->offset = 0;
 3d6:	13 82       	std	Z+3, r1	; 0x03
 3d8:	12 82       	std	Z+2, r1	; 0x02
	return msg;
}
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <main>:

int main() {
	lcd_init();
 3e0:	1b df       	rcall	.-458    	; 0x218 <lcd_init>
	ADCSRA = 0x87;
 3e2:	87 e8       	ldi	r24, 0x87	; 135
 3e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADMUX = 0x40;
 3e8:	80 e4       	ldi	r24, 0x40	; 64
 3ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	TIMSK0 = 0x01;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
	TCNT0 = 0x00;
 3f4:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x00;
 3f6:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x03;
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	85 bd       	out	0x25, r24	; 37
	sei();
 3fc:	78 94       	sei
	Message* msg1 = new_message("short string ");
 3fe:	89 e0       	ldi	r24, 0x09	; 9
 400:	92 e0       	ldi	r25, 0x02	; 2
 402:	e0 df       	rcall	.-64     	; 0x3c4 <new_message>
 404:	8c 01       	movw	r16, r24
	Message* msg2 = new_message("this is a slightly longer string ");
 406:	87 e1       	ldi	r24, 0x17	; 23
 408:	92 e0       	ldi	r25, 0x02	; 2
 40a:	dc df       	rcall	.-72     	; 0x3c4 <new_message>
 40c:	ec 01       	movw	r28, r24
    char* cpy = (char*) malloc(17 * sizeof(char));
 40e:	81 e1       	ldi	r24, 0x11	; 17
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	69 d0       	rcall	.+210    	; 0x4e6 <malloc>
 414:	6c 01       	movw	r12, r24
 416:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <scroll>
	for(;;_delay_ms(500)) {
		if (!scroll) {
 41a:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <scroll+0x1>
 41e:	89 2b       	or	r24, r25
 420:	89 f1       	breq	.+98     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			continue;
		}
		lcd_command(1);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	a6 de       	rcall	.-692    	; 0x172 <lcd_command>
 426:	f8 01       	movw	r30, r16
		msg1->offset++;
 428:	e2 80       	ldd	r14, Z+2	; 0x02
 42a:	f3 80       	ldd	r15, Z+3	; 0x03
 42c:	ff ef       	ldi	r31, 0xFF	; 255
 42e:	ef 1a       	sub	r14, r31
 430:	ff 0a       	sbc	r15, r31
 432:	f8 01       	movw	r30, r16
 434:	f3 82       	std	Z+3, r15	; 0x03
 436:	e2 82       	std	Z+2, r14	; 0x02
		msg1->offset %= str_len(msg1->text);
 438:	80 81       	ld	r24, Z
 43a:	91 81       	ldd	r25, Z+1	; 0x01
 43c:	7d df       	rcall	.-262    	; 0x338 <str_len>
 43e:	bc 01       	movw	r22, r24
 440:	c7 01       	movw	r24, r14
 442:	2a d0       	rcall	.+84     	; 0x498 <__divmodhi4>
 444:	f8 01       	movw	r30, r16
 446:	93 83       	std	Z+3, r25	; 0x03
		cpy_w_offset(msg1, cpy);
 448:	82 83       	std	Z+2, r24	; 0x02
 44a:	b6 01       	movw	r22, r12
 44c:	c8 01       	movw	r24, r16
 44e:	84 df       	rcall	.-248    	; 0x358 <cpy_w_offset>
void lcd_command( uint8_t d );

// An inline function to set the x and y position
// in a 2-line LCD display
static inline void lcd_xy(uint8_t x, uint8_t y){
	lcd_command(x + ((y==1) ? LCD_LINE2 : LCD_LINE1 ));
 450:	80 e8       	ldi	r24, 0x80	; 128
 452:	8f de       	rcall	.-738    	; 0x172 <lcd_command>
 454:	c6 01       	movw	r24, r12
		lcd_xy(0,0);
		lcd_puts(cpy);
 456:	d2 de       	rcall	.-604    	; 0x1fc <lcd_puts>
 458:	ea 80       	ldd	r14, Y+2	; 0x02
		msg2->offset++;
 45a:	fb 80       	ldd	r15, Y+3	; 0x03
 45c:	ff ef       	ldi	r31, 0xFF	; 255
 45e:	ef 1a       	sub	r14, r31
 460:	ff 0a       	sbc	r15, r31
 462:	fb 82       	std	Y+3, r15	; 0x03
 464:	ea 82       	std	Y+2, r14	; 0x02
		msg2->offset %= str_len(msg2->text);
 466:	88 81       	ld	r24, Y
 468:	99 81       	ldd	r25, Y+1	; 0x01
 46a:	66 df       	rcall	.-308    	; 0x338 <str_len>
 46c:	bc 01       	movw	r22, r24
 46e:	c7 01       	movw	r24, r14
 470:	13 d0       	rcall	.+38     	; 0x498 <__divmodhi4>
 472:	9b 83       	std	Y+3, r25	; 0x03
		cpy_w_offset(msg2, cpy);
 474:	8a 83       	std	Y+2, r24	; 0x02
 476:	b6 01       	movw	r22, r12
 478:	ce 01       	movw	r24, r28
 47a:	6e df       	rcall	.-292    	; 0x358 <cpy_w_offset>
 47c:	80 ec       	ldi	r24, 0xC0	; 192
 47e:	79 de       	rcall	.-782    	; 0x172 <lcd_command>
 480:	c6 01       	movw	r24, r12
		lcd_xy(0,1);
		lcd_puts(cpy);
 482:	bc de       	rcall	.-648    	; 0x1fc <lcd_puts>
 484:	2f ef       	ldi	r18, 0xFF	; 255
 486:	89 e6       	ldi	r24, 0x69	; 105
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 488:	98 e1       	ldi	r25, 0x18	; 24
 48a:	21 50       	subi	r18, 0x01	; 1
 48c:	80 40       	sbci	r24, 0x00	; 0
 48e:	90 40       	sbci	r25, 0x00	; 0
 490:	e1 f7       	brne	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 492:	00 c0       	rjmp	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 494:	00 00       	nop
 496:	bf cf       	rjmp	.-130    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

00000498 <__divmodhi4>:
 498:	97 fb       	bst	r25, 7
 49a:	07 2e       	mov	r0, r23
 49c:	16 f4       	brtc	.+4      	; 0x4a2 <__divmodhi4+0xa>
 49e:	00 94       	com	r0
 4a0:	06 d0       	rcall	.+12     	; 0x4ae <__divmodhi4_neg1>
 4a2:	77 fd       	sbrc	r23, 7
 4a4:	08 d0       	rcall	.+16     	; 0x4b6 <__divmodhi4_neg2>
 4a6:	0b d0       	rcall	.+22     	; 0x4be <__udivmodhi4>
 4a8:	07 fc       	sbrc	r0, 7
 4aa:	05 d0       	rcall	.+10     	; 0x4b6 <__divmodhi4_neg2>
 4ac:	3e f4       	brtc	.+14     	; 0x4bc <__divmodhi4_exit>

000004ae <__divmodhi4_neg1>:
 4ae:	90 95       	com	r25
 4b0:	81 95       	neg	r24
 4b2:	9f 4f       	sbci	r25, 0xFF	; 255
 4b4:	08 95       	ret

000004b6 <__divmodhi4_neg2>:
 4b6:	70 95       	com	r23
 4b8:	61 95       	neg	r22
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255

000004bc <__divmodhi4_exit>:
 4bc:	08 95       	ret

000004be <__udivmodhi4>:
 4be:	aa 1b       	sub	r26, r26
 4c0:	bb 1b       	sub	r27, r27
 4c2:	51 e1       	ldi	r21, 0x11	; 17
 4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <__udivmodhi4_ep>

000004c6 <__udivmodhi4_loop>:
 4c6:	aa 1f       	adc	r26, r26
 4c8:	bb 1f       	adc	r27, r27
 4ca:	a6 17       	cp	r26, r22
 4cc:	b7 07       	cpc	r27, r23
 4ce:	10 f0       	brcs	.+4      	; 0x4d4 <__udivmodhi4_ep>
 4d0:	a6 1b       	sub	r26, r22
 4d2:	b7 0b       	sbc	r27, r23

000004d4 <__udivmodhi4_ep>:
 4d4:	88 1f       	adc	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	5a 95       	dec	r21
 4da:	a9 f7       	brne	.-22     	; 0x4c6 <__udivmodhi4_loop>
 4dc:	80 95       	com	r24
 4de:	90 95       	com	r25
 4e0:	bc 01       	movw	r22, r24
 4e2:	cd 01       	movw	r24, r26
 4e4:	08 95       	ret

000004e6 <malloc>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	91 05       	cpc	r25, r1
 4f2:	10 f4       	brcc	.+4      	; 0x4f8 <malloc+0x12>
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <__flp>
 4fc:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <__flp+0x1>
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	a0 e0       	ldi	r26, 0x00	; 0
 506:	b0 e0       	ldi	r27, 0x00	; 0
 508:	30 97       	sbiw	r30, 0x00	; 0
 50a:	19 f1       	breq	.+70     	; 0x552 <malloc+0x6c>
 50c:	40 81       	ld	r20, Z
 50e:	51 81       	ldd	r21, Z+1	; 0x01
 510:	02 81       	ldd	r16, Z+2	; 0x02
 512:	13 81       	ldd	r17, Z+3	; 0x03
 514:	48 17       	cp	r20, r24
 516:	59 07       	cpc	r21, r25
 518:	c8 f0       	brcs	.+50     	; 0x54c <malloc+0x66>
 51a:	84 17       	cp	r24, r20
 51c:	95 07       	cpc	r25, r21
 51e:	69 f4       	brne	.+26     	; 0x53a <malloc+0x54>
 520:	10 97       	sbiw	r26, 0x00	; 0
 522:	31 f0       	breq	.+12     	; 0x530 <malloc+0x4a>
 524:	12 96       	adiw	r26, 0x02	; 2
 526:	0c 93       	st	X, r16
 528:	12 97       	sbiw	r26, 0x02	; 2
 52a:	13 96       	adiw	r26, 0x03	; 3
 52c:	1c 93       	st	X, r17
 52e:	27 c0       	rjmp	.+78     	; 0x57e <malloc+0x98>
 530:	00 93 3c 02 	sts	0x023C, r16	; 0x80023c <__flp>
 534:	10 93 3d 02 	sts	0x023D, r17	; 0x80023d <__flp+0x1>
 538:	22 c0       	rjmp	.+68     	; 0x57e <malloc+0x98>
 53a:	21 15       	cp	r18, r1
 53c:	31 05       	cpc	r19, r1
 53e:	19 f0       	breq	.+6      	; 0x546 <malloc+0x60>
 540:	42 17       	cp	r20, r18
 542:	53 07       	cpc	r21, r19
 544:	18 f4       	brcc	.+6      	; 0x54c <malloc+0x66>
 546:	9a 01       	movw	r18, r20
 548:	bd 01       	movw	r22, r26
 54a:	ef 01       	movw	r28, r30
 54c:	df 01       	movw	r26, r30
 54e:	f8 01       	movw	r30, r16
 550:	db cf       	rjmp	.-74     	; 0x508 <malloc+0x22>
 552:	21 15       	cp	r18, r1
 554:	31 05       	cpc	r19, r1
 556:	f9 f0       	breq	.+62     	; 0x596 <malloc+0xb0>
 558:	28 1b       	sub	r18, r24
 55a:	39 0b       	sbc	r19, r25
 55c:	24 30       	cpi	r18, 0x04	; 4
 55e:	31 05       	cpc	r19, r1
 560:	80 f4       	brcc	.+32     	; 0x582 <malloc+0x9c>
 562:	8a 81       	ldd	r24, Y+2	; 0x02
 564:	9b 81       	ldd	r25, Y+3	; 0x03
 566:	61 15       	cp	r22, r1
 568:	71 05       	cpc	r23, r1
 56a:	21 f0       	breq	.+8      	; 0x574 <malloc+0x8e>
 56c:	fb 01       	movw	r30, r22
 56e:	93 83       	std	Z+3, r25	; 0x03
 570:	82 83       	std	Z+2, r24	; 0x02
 572:	04 c0       	rjmp	.+8      	; 0x57c <malloc+0x96>
 574:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <__flp+0x1>
 578:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__flp>
 57c:	fe 01       	movw	r30, r28
 57e:	32 96       	adiw	r30, 0x02	; 2
 580:	44 c0       	rjmp	.+136    	; 0x60a <malloc+0x124>
 582:	fe 01       	movw	r30, r28
 584:	e2 0f       	add	r30, r18
 586:	f3 1f       	adc	r31, r19
 588:	81 93       	st	Z+, r24
 58a:	91 93       	st	Z+, r25
 58c:	22 50       	subi	r18, 0x02	; 2
 58e:	31 09       	sbc	r19, r1
 590:	39 83       	std	Y+1, r19	; 0x01
 592:	28 83       	st	Y, r18
 594:	3a c0       	rjmp	.+116    	; 0x60a <malloc+0x124>
 596:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <__data_end>
 59a:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <__data_end+0x1>
 59e:	23 2b       	or	r18, r19
 5a0:	41 f4       	brne	.+16     	; 0x5b2 <malloc+0xcc>
 5a2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 5a6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 5aa:	30 93 3b 02 	sts	0x023B, r19	; 0x80023b <__data_end+0x1>
 5ae:	20 93 3a 02 	sts	0x023A, r18	; 0x80023a <__data_end>
 5b2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 5b6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 5ba:	21 15       	cp	r18, r1
 5bc:	31 05       	cpc	r19, r1
 5be:	41 f4       	brne	.+16     	; 0x5d0 <malloc+0xea>
 5c0:	2d b7       	in	r18, 0x3d	; 61
 5c2:	3e b7       	in	r19, 0x3e	; 62
 5c4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 5c8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 5cc:	24 1b       	sub	r18, r20
 5ce:	35 0b       	sbc	r19, r21
 5d0:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <__data_end>
 5d4:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <__data_end+0x1>
 5d8:	e2 17       	cp	r30, r18
 5da:	f3 07       	cpc	r31, r19
 5dc:	a0 f4       	brcc	.+40     	; 0x606 <malloc+0x120>
 5de:	2e 1b       	sub	r18, r30
 5e0:	3f 0b       	sbc	r19, r31
 5e2:	28 17       	cp	r18, r24
 5e4:	39 07       	cpc	r19, r25
 5e6:	78 f0       	brcs	.+30     	; 0x606 <malloc+0x120>
 5e8:	ac 01       	movw	r20, r24
 5ea:	4e 5f       	subi	r20, 0xFE	; 254
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255
 5ee:	24 17       	cp	r18, r20
 5f0:	35 07       	cpc	r19, r21
 5f2:	48 f0       	brcs	.+18     	; 0x606 <malloc+0x120>
 5f4:	4e 0f       	add	r20, r30
 5f6:	5f 1f       	adc	r21, r31
 5f8:	50 93 3b 02 	sts	0x023B, r21	; 0x80023b <__data_end+0x1>
 5fc:	40 93 3a 02 	sts	0x023A, r20	; 0x80023a <__data_end>
 600:	81 93       	st	Z+, r24
 602:	91 93       	st	Z+, r25
 604:	02 c0       	rjmp	.+4      	; 0x60a <malloc+0x124>
 606:	e0 e0       	ldi	r30, 0x00	; 0
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	cf 01       	movw	r24, r30
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <free>:
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	00 97       	sbiw	r24, 0x00	; 0
 61c:	09 f4       	brne	.+2      	; 0x620 <free+0xa>
 61e:	81 c0       	rjmp	.+258    	; 0x722 <free+0x10c>
 620:	fc 01       	movw	r30, r24
 622:	32 97       	sbiw	r30, 0x02	; 2
 624:	13 82       	std	Z+3, r1	; 0x03
 626:	12 82       	std	Z+2, r1	; 0x02
 628:	a0 91 3c 02 	lds	r26, 0x023C	; 0x80023c <__flp>
 62c:	b0 91 3d 02 	lds	r27, 0x023D	; 0x80023d <__flp+0x1>
 630:	10 97       	sbiw	r26, 0x00	; 0
 632:	81 f4       	brne	.+32     	; 0x654 <free+0x3e>
 634:	20 81       	ld	r18, Z
 636:	31 81       	ldd	r19, Z+1	; 0x01
 638:	82 0f       	add	r24, r18
 63a:	93 1f       	adc	r25, r19
 63c:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <__data_end>
 640:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <__data_end+0x1>
 644:	28 17       	cp	r18, r24
 646:	39 07       	cpc	r19, r25
 648:	51 f5       	brne	.+84     	; 0x69e <free+0x88>
 64a:	f0 93 3b 02 	sts	0x023B, r31	; 0x80023b <__data_end+0x1>
 64e:	e0 93 3a 02 	sts	0x023A, r30	; 0x80023a <__data_end>
 652:	67 c0       	rjmp	.+206    	; 0x722 <free+0x10c>
 654:	ed 01       	movw	r28, r26
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	ce 17       	cp	r28, r30
 65c:	df 07       	cpc	r29, r31
 65e:	40 f4       	brcc	.+16     	; 0x670 <free+0x5a>
 660:	4a 81       	ldd	r20, Y+2	; 0x02
 662:	5b 81       	ldd	r21, Y+3	; 0x03
 664:	9e 01       	movw	r18, r28
 666:	41 15       	cp	r20, r1
 668:	51 05       	cpc	r21, r1
 66a:	f1 f0       	breq	.+60     	; 0x6a8 <free+0x92>
 66c:	ea 01       	movw	r28, r20
 66e:	f5 cf       	rjmp	.-22     	; 0x65a <free+0x44>
 670:	d3 83       	std	Z+3, r29	; 0x03
 672:	c2 83       	std	Z+2, r28	; 0x02
 674:	40 81       	ld	r20, Z
 676:	51 81       	ldd	r21, Z+1	; 0x01
 678:	84 0f       	add	r24, r20
 67a:	95 1f       	adc	r25, r21
 67c:	c8 17       	cp	r28, r24
 67e:	d9 07       	cpc	r29, r25
 680:	59 f4       	brne	.+22     	; 0x698 <free+0x82>
 682:	88 81       	ld	r24, Y
 684:	99 81       	ldd	r25, Y+1	; 0x01
 686:	84 0f       	add	r24, r20
 688:	95 1f       	adc	r25, r21
 68a:	02 96       	adiw	r24, 0x02	; 2
 68c:	91 83       	std	Z+1, r25	; 0x01
 68e:	80 83       	st	Z, r24
 690:	8a 81       	ldd	r24, Y+2	; 0x02
 692:	9b 81       	ldd	r25, Y+3	; 0x03
 694:	93 83       	std	Z+3, r25	; 0x03
 696:	82 83       	std	Z+2, r24	; 0x02
 698:	21 15       	cp	r18, r1
 69a:	31 05       	cpc	r19, r1
 69c:	29 f4       	brne	.+10     	; 0x6a8 <free+0x92>
 69e:	f0 93 3d 02 	sts	0x023D, r31	; 0x80023d <__flp+0x1>
 6a2:	e0 93 3c 02 	sts	0x023C, r30	; 0x80023c <__flp>
 6a6:	3d c0       	rjmp	.+122    	; 0x722 <free+0x10c>
 6a8:	e9 01       	movw	r28, r18
 6aa:	fb 83       	std	Y+3, r31	; 0x03
 6ac:	ea 83       	std	Y+2, r30	; 0x02
 6ae:	49 91       	ld	r20, Y+
 6b0:	59 91       	ld	r21, Y+
 6b2:	c4 0f       	add	r28, r20
 6b4:	d5 1f       	adc	r29, r21
 6b6:	ec 17       	cp	r30, r28
 6b8:	fd 07       	cpc	r31, r29
 6ba:	61 f4       	brne	.+24     	; 0x6d4 <free+0xbe>
 6bc:	80 81       	ld	r24, Z
 6be:	91 81       	ldd	r25, Z+1	; 0x01
 6c0:	84 0f       	add	r24, r20
 6c2:	95 1f       	adc	r25, r21
 6c4:	02 96       	adiw	r24, 0x02	; 2
 6c6:	e9 01       	movw	r28, r18
 6c8:	99 83       	std	Y+1, r25	; 0x01
 6ca:	88 83       	st	Y, r24
 6cc:	82 81       	ldd	r24, Z+2	; 0x02
 6ce:	93 81       	ldd	r25, Z+3	; 0x03
 6d0:	9b 83       	std	Y+3, r25	; 0x03
 6d2:	8a 83       	std	Y+2, r24	; 0x02
 6d4:	e0 e0       	ldi	r30, 0x00	; 0
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	12 96       	adiw	r26, 0x02	; 2
 6da:	8d 91       	ld	r24, X+
 6dc:	9c 91       	ld	r25, X
 6de:	13 97       	sbiw	r26, 0x03	; 3
 6e0:	00 97       	sbiw	r24, 0x00	; 0
 6e2:	19 f0       	breq	.+6      	; 0x6ea <free+0xd4>
 6e4:	fd 01       	movw	r30, r26
 6e6:	dc 01       	movw	r26, r24
 6e8:	f7 cf       	rjmp	.-18     	; 0x6d8 <free+0xc2>
 6ea:	8d 91       	ld	r24, X+
 6ec:	9c 91       	ld	r25, X
 6ee:	11 97       	sbiw	r26, 0x01	; 1
 6f0:	9d 01       	movw	r18, r26
 6f2:	2e 5f       	subi	r18, 0xFE	; 254
 6f4:	3f 4f       	sbci	r19, 0xFF	; 255
 6f6:	82 0f       	add	r24, r18
 6f8:	93 1f       	adc	r25, r19
 6fa:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <__data_end>
 6fe:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <__data_end+0x1>
 702:	28 17       	cp	r18, r24
 704:	39 07       	cpc	r19, r25
 706:	69 f4       	brne	.+26     	; 0x722 <free+0x10c>
 708:	30 97       	sbiw	r30, 0x00	; 0
 70a:	29 f4       	brne	.+10     	; 0x716 <free+0x100>
 70c:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <__flp+0x1>
 710:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <__flp>
 714:	02 c0       	rjmp	.+4      	; 0x71a <free+0x104>
 716:	13 82       	std	Z+3, r1	; 0x03
 718:	12 82       	std	Z+2, r1	; 0x02
 71a:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <__data_end+0x1>
 71e:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <__data_end>
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <_exit>:
 728:	f8 94       	cli

0000072a <__stop_program>:
 72a:	ff cf       	rjmp	.-2      	; 0x72a <__stop_program>
